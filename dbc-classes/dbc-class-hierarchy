;;; :FILE-CREATED <Timestamp: #{2011-03-21T11:13:55-04:00Z}#{11121} - by MON>
;;; :FILE dbc-classes/dbc-class-hierarchy
;;; ==============================

Given enough indirections a UUID can resolve _any_ ojbect (and the values contained therein).

This being the case, we can store all UUID/object key/value pairs in a _single_ global hash-table. 

It doesn't matter what class or type the UUID dereferences, so long as the
dereferenced object (the value) is itself identified by a UUID we can simply
chase pointers until we find the thing we are looking for.

If we store all objects in the DBC sytem in a single global hash-table and
provide a set of interface methods for accessing, setting, and updating these
objects allows us the following benfits:

 - We can limit the number of locks we must acquire and hold when mutating the system

 - We may be able to find a way to keep track of expired objects by specifing
   weakness rules for the hash-table.
   e.g. If both the UUID key and Object it dereferences are expired then the
   pair will not remain accessible in the global hash-table and therefor we will
   pre-empt chasing of pointers for non-existing objects.

In order for the approach outlined above to work we need to require and maintain
consistency w/r/t the following:

 - all objects in the dbc-system must have a UUID

 - The UUID -> object mapping for persistent objects can not change!

 - all active objects in the dbc-system must have a UUID present as a key in the global hash-table

 - all active objects must be reachable by a look-up on their UUID in the global hash-table

 - the primary means of referencing an object in the dbc-system is through the object's UUID

The last requirement; that our primary means of referencing an object vias it's
UUID is prone to creation of tedious code.

Our main obstacle will be to provide a clean interface of specializing methods
which paper over this tedium while ensuring that the system doesn't become
corrupted or inconsistent. This obstacle is likeley to be further complicated by
the interaction with whatever persistence backend we choose esp. if that backend
is implemented with MOP magic.

In order for this to work we need to maintain very tight control on the core set
of objects that we persist and define the necessary auxiliary methods to ensure
that the slot-values of our persistent classes don't change out from under
us... This is ___especially__ important when a slot-value is an instance of a
class!!!

Following provides an example of the basic idioms we imagine.

 *dbc-global-hash-table*
   key        value
  --------------------
  UUID-J ---> OBJECT-L   
  UUID-K ---> OBJECT-M
  UUUD-Q ---> OBJECT-N
  UUUD-Y ---> OBJECT-O
  UUUD-Z ---> OBJECT-P

UUID-J dereferences OBJECT-L
 OBJECT-L is an instance of an entity class
 OBJECT-L contains slot hash-for-entity-foo. 
 It's slot-value is consed pair:
 ( UUID-K . UUID-Y )

UUID-K dereferences OBJECT-M 
OBJECT-M contains a slot psuedonym-hash with slot-value #<HASH-TABLE ... >

UUID-Y dereferences OBJECT-O
OBJECT-O contains a slot pseudonym-list which lists the known pseudonyms of OBJECT-L

OBJECT-O exists as a hash-table value as UUID-Y in the table contained of OBJECT-M pseudonym-hash slot

So, imagine we want to find the pseudonyms for the entity OBJECT-L

To do this we need to get from OBJECT-L to OBJECT-O.
Because we don't refer to instances directly we refer OBJECT-L to it through UUID-J:

 (gethash UUID-J *dbc-global-hash-table*)
 => OBJECT-L

Get the key/value pair of UUIDs which dereferece OBJECT-M and OBJECT-O e.g. a
hash-table and a key into the table:

 (slot-value (gethash UUID-J *dbc-global-hash-table*) 'hash-for-entity-foo)
 => (UUID-K . UUID-Y)

 (gethash (car (slot-value (gethash UUID-J *dbc-global-hash-table*) 'hash-for-entity-foo)) ; UUID-K
          *dbc-global-hash-table*)
 => OBJECT-M 

 (slot-value (gethash (car (slot-value (gethash UUID-J *dbc-global-hash-table*) 'hash-for-entity-foo)) ; UUID-K
                       *dbc-global-hash-table*) ; OBJECT-M
              'pseudonym-hash)
  ;=> #<HASH-TABLE ... >


 (gethash (gethash (cdr (slot-value (gethash UUID-J *dbc-global-hash-table*) 'hash-for-entity-foo)) *dbc-global-hash-table*) ; UUID-Y
          (slot-value (gethash (car (slot-value (gethash UUID-J *dbc-global-hash-table*) 'hash-for-entity-foo)) ; UUID-K
                               *dbc-global-hash-table*) ; OBJECT-M
                      'pseudonym-hash)                  ;#<HASH-TABLE ... >
          *dbc-global-hash-table*)
 ;=> OBJECT-O

 (slot-value (gethash (gethash (cdr (slot-value (gethash UUID-J *dbc-global-hash-table*) 'hash-for-entity-foo)) *dbc-global-hash-table*) ; UUID-Y
                      (slot-value (gethash (car (slot-value (gethash UUID-J *dbc-global-hash-table*) 'hash-for-entity-foo)) ; UUID-K
                                           *dbc-global-hash-table*) ; OBJECT-M
                                  'pseudonym-hash) ;#<HASH-TABLE ... >
                      *dbc-global-hash-table*)     ; OBJECT-O
             'pseudonym-list)
 => ( ... list of pseudonyms for OBJECT-M ... )
;;; ==============================
:NOTE Actually some of the above assertions aren't entirely correct.

Upon further review i now remember that alot of the UUID -> <THING> mappings were more simplistic
Entities in the dbc system aren't always a direct instance of a class or subclass.

Lets say we encounter the string "Chanel" in some context.

Which entity are we referencing by "Chanel" is it the artist, person, or brand?

We need a way to map from the string "Chanel" to each of the class instances the
string "Chanel" may refer to, e.g. naf-entity-person, naf-entity-artist, naf-entity-brand.

Assume the display name for the naf-entity-person, naf-entity-artist instances
are identical as:
 "Chanel (Gabrielle "Coco")" 
If we did a simple lookup on that string as a key into the hypothetical
hash-table *string-to-class-instance-mapping* which instance of "Chanel
(Gabrielle "Coco")" will we find?

 What we need is a way to map to the correct instance. 
 Heres how we might do it:

 (make-v5-uuid *naf-brand-entity-namespace* "Chanel (Gabrielle \"Coco\")")
  => f9b6945d-3d00-5ba3-a798-39bdb41ee37c

 (make-v5-uuid *naf-artist-entity-namespace* "Chanel (Gabrielle \"Coco\")")
 => 57a2ff33-5528-536e-86d8-f7a3cb38d842 

 (make-v5-uuid *naf-person-entity-namespace* "Chanel (Gabrielle \"Coco\")")
 => e9f719b4-1c8f-54b4-b8de-bd158d0e4fd7

 Now, while there is a naf-brand-entity closely associated with the string
 "Chanel (Gabrielle "Coco")" it doesn't share that display name, e.g. the
 display name for the Chanel naf-brand-entity is "Chanel".
 So, any dereference on the UUID f9b6945d-3d00-5ba3-a798-39bdb41ee37c 
 will not return. Instead, to find the instance of naf-brand-entity we'd do:
  (make-v5-uuid *naf-brand-entity-namespace* "Chanel")

 However, we could dereference on both of the UUIDs for the display-name 
 "Chanel (Gabrielle "Coco")" in the namespaces:
  *naf-person-entity-namespace* and *naf-artist-entity-namespace*
  
  So, depending on the current active context we can find the appropriate
  corresponding entity for that context, e.g. when we are looking for instances
  of naf-person-entity if the UUID of a display-name string in the
  *naf-person-entity-namespace* exists in some hypothetical hash-table
  *global-person-entity-hash-table* we can find the class instance associated
  *with that display-name, e.g.

   (gethash (make-v5-uuid *naf-person-entity-namespace* "Chanel (Gabrielle \"Coco\")")
           *global-person-entity-hash-table*)
  => #<naf-person-entity {1818191}>


;;; ==============================
;;; :NOTE Following is an enumeration of the DBC class hierarchy.
;;; This spec should not be considered normative and should be updated as
;;; changes precipitate.


dbc-classes/dbc-class.lisp
base-dbc


dbc-classes/dbc-class-paths.lisp

system-base
system-path
system-subdir

          
dbc-classes/dbc-class-users.lisp

base-user


dbc-classes/dbc-class-uuid.lisp

base-uuid

(base-dbc)
- base-uuid (base-dbc)
-- system-object-uuid (base-uuid)
   system-objects identified by UUID
   
    base-dbc
    base-regexp
    base-entity
    base-control-id
    system-object-uuid


dbc-classes/dbc-class-control-id.lisp


;; The class `base-control-id' is implemented to distinguish different
;; types of controlled identities in classes with slots whose values specify
;; some form of value used for identification puroposes.
;; :NOTE subclasses of `base-control-id' are distinct from those of the class
;; `base-uuid' which defines _canonical_ identities for dbc system objects (as
;;   distinct from the values they are contained of).
;;
;; :NOTE The class `control-id-display-name' does not duplicate functionality of
;; `control-id-display-name-for-entity-type' but some of its subclasses will likely
;;  involve complex interactions in the C-P-L around the
;;  `display-name-for-entity' and `display-name-for-entity-of-type' slot-values.

;; *control-id-display-author-namespace*
;; *control-id-display-brand-namespace*
;; *control-id-display-location-namespace*
;; *control-id-display-person-namespace*
;; *control-id-display-publication-namespace*

;; *control-id-display-category-namespace*
;; *control-id-display-theme-namespace*
;; *control-id-display-technique-namespace*
;; *control-id-display-mount-namespace*
;; *control-id-display-meterial-namespace*
;; *control-id-display-taxon-namespace*

;; :NOTE Not clear if these are more system type objects entity type objects:
;; *control-id-display-user-namespace*
;; *control-id-display-documentation-namespace*
;; *control-id-display-description-namespace*
;; *control-id-display-image-namespace*



- base-control-id (base-dbc)

-- control-id-display-name                  (base-control-id) ;; String based identity
--- control-id-display-name-for-entity-type (control-id-display-name)
---- control-id-display-artist              (control-id-display-name-for-entity-type)
---- control-id-display-brand               (control-id-display-name-for-entity-type)
---- control-id-display-author              (control-id-display-name-for-entity-type)
---- control-id-display-person              (control-id-display-name-for-entity-type)
---- control-id-display-publication         (control-id-display-name-for-entity-type)
---- control-id-display-publication-full    (control-id-display-publication) ;; !!!
---- control-id-display-location            (control-id-display-name-for-entity-type)
---- control-id-display-technique           (control-id-display-name-for-entity-type)
---- control-id-display-mount               (control-id-display-name-for-entity-type)
---- control-id-display-material            (control-id-display-name-for-entity-type)
---- control-id-display-taxon               (control-id-display-name-for-entity-type)


;; Item refs id-nums should be obfuscated with a UUID and are deprecated!
;; Entity id-nums may occure congruently and are deprecated!
;; Documentation id-nums for entities may occure congruently and are deprecated!
;; The deprecated entity specific slot namespaces should be
;; transformed to their superclass slot equivalent once parsing is finished.
;; e.g. "control-id-doc-num-artist"    -> "control-id-doc-uuid"
;; e.g. "control-id-entity-num-artist" -> "control-id-entity-uuid"

control-id-doc-num

-- control-id-deprecated-record-id       (base-control-id)


--- control-id-item-num                  (control-id-deprecated-record-id)

--- control-id-doc-num                   (control-id-deprecated-record-id)
---- control-id-doc-num-artist           (control-id-doc-num)
---- control-id-doc-num-brand            (control-id-doc-num)
---- control-id-doc-num-author           (control-id-doc-num)
---- control-id-doc-num-person           (control-id-doc-num)
---- control-id-doc-num-publication      (control-id-doc-num)


--- control-id-entity-num                (control-id-deprecated-record-id)
---- control-id-entity-num-artist        (control-id-entity-num)
---- control-id-entity-num-author        (control-id-entity-num)
---- control-id-entity-num-brand         (control-id-entity-num)
---- control-id-entity-num-person        (control-id-entity-num)
---- control-id-entity-num-publication   (control-id-entity-num)
---- control-id-entity-num-technique     (control-id-entity-num)

;; These will need a dispatch on a string match. because we currently have
;; slot-names control-id-db-0 and control-id-db-1 for the classes `naf-entity-<FOO>'
;; This is because we can't (at first) be sure from which db the control-id is derived.
-- control-id-db                     (base-control-id)
--- control-id-db-loc                (control-id-db) ;; nb2007017414 | n 98028882 | no 99021790
--- control-id-db-ulan               (control-id-db) ;; 500013504
--- control-id-db-bnf                (control-id-db) ;; FRBNF40421659
--- control-id-db-oclc               (control-id-db) ;; 



dbc-classes/dbc-class-entity.lisp
- base-entity           (base-dbc)
-- base-category-entity (base-entity)
-- base-theme-entity    (base-entity)
-- base-taxon-entity    (base-entity)

-- base-media-entity       (base-entity)
--- media-entity-technique (base-media-entity)
--- media-entity-material  (base-media-entity)
--- media-entity-mount     (base-media-entity)
--- media-entity-color     (base-media-entity)

-- base-location-entity (base-entity)
--- location-entity
---- location-entity-verified
---- location-entity-unverified
---- location-entity-imagined
;;
;; It isn't clear yet how to organize these but some form of them is necessary.
--- location-entity-nationality (location-entity-????)
--- location-entity-birth       (location-entity-????)
--- location-entity-death       (location-entity-????) 
--- location-entity-published   (location-entity-????)

;; -- base-taxon-entity (base-entity)
;; taxon-entity-coref

;; base-citation-entity is  not currently implemented.
-- base-citation-entity         (base-entity)
--- citation-entity-institution (base-citation-entity)
--- citation-entity-publication (base-citation-entity)
--- citation-entity-website     (base-citation-entity)

-- base-naf-entity      (base-entity)
    _________________ Below should have their own files

--- naf-entity-person                  (base-naf-entity)
--- naf-entity-artist                  (base-naf-entity)
--- naf-entity-author                  (base-naf-entity)
--- naf-entity-brand                   (base-naf-entity)
--- naf-entity-publication             (base-naf-entity)
---- naf-entity-publication-book       (naf-entity-publication)
---- naf-entity-publication-subscribed (naf-entity-publication)
---- naf-entity-publication-atlas      (naf-entity-publication)
---- naf-entity-publication-periodical (naf-entity-publication)
---- naf-entity-publication-catalog    (naf-entity-publication)
---- naf-entity-publication-pamphlet   (naf-entity-publication)

    ______________________  These are as yet undecided w/r/t how to handle
--- naf-entity-publisher    (base-naf-entity)
--- naf-entity-institution  (base-naf-entity)
--- naf-entity-citation     (base-naf-entity) ;; Or, maybe (base-naf-entity base-citation-entity)

;; This one is settled - we don't use it. Use base-location-entity instead.
--- naf-entity-location     (base-naf-entity) ;; Or, maybe (base-naf-entity base-location-entity)


dbc-classes/dbc-class-regexps.lisp

-- base-regexp                         	     (base-dbc)
--- entity-regexp-subclass-allocation  	     (base-regexp)
--- entity-regexp                      	     (base-regexp)
---- parsed-field-name-regexp          	     (entity-regexp)
---- theme-entity-regexp               	     (entity-regexp)
---- category-entity-regexp            	     (entity-regexp)
____
---- naf-entity-type-regexp            	     (entity-regexp)
----- naf-entity-control-name-regexp   	     (naf-entity-type-regexp)
------ naf-entity-artist-control-regexp	     (naf-entity-control-name-regexp)
------ naf-entity-person-control-regexp	     (naf-entity-control-name-regexp)
------ naf-entity-author-control-regexp	     (naf-entity-control-name-regexp)
------ naf-entity-brand-control-regexp       (naf-entity-control-name-regexp)
------ naf-entity-publication-control-regexp (naf-entity-control-name-regexp)
_____
----- naf-entity-alt-name-regexp             (naf-entity-alttype-regexp)
------ naf-entity-artist-alt-regexp          (naf-entity-alt-name-regexp)
------ naf-entity-person-alt-regexp          (naf-entity-alt-name-regexp)
------ naf-entity-author-alt-regexp          (naf-entity-alt-name-regexp)
------ naf-entity-brand-alt-regexp           (naf-entity-alt-name-regexp)
------ naf-entity-publication-alt-regexp     (naf-entity-alt-name-regexp)


dbc-classes/dbc-image.lisp

base-image (base-dbc)


dbc-classes/dbc-class-edit.lisp

base-edit


dbc-classes/dbc-class-description.lisp

- base-description                            (base-dbc)
-- base-description-external                  (base-description)
-- base-description-internal                  (base-description)
-- base-description-entity                    (base-description)
--- base-description-entity-internal          (base-description-internal base-description-entity)
--- base-description-entity-external          (base-description-external base-description-entity)
---- base-description-entity-media-note       (base-description-entity-internal)
----- description-media-entity-technique-note (base-description-entity-media-note)
----- description-media-entity-material-note  (base-description-entity-media-note)
----- description-media-entity-mount-note     (base-description-entity-media-note)
----- description-media-entity-color-note     (base-description-entity-media-note)
---- base-description-location-entity-note    (base-description-entity-internal)
---- base-description-taxon-entity-note       (base-description-entity-internal)


dbc-classes/dbc-class-documentation.lisp

base-documenation (base-dbc)



dbc-classes/dbc-class-parse-convert.lisp

parsed-class
parsed-naf-entity    (parsed-class)


           
dbc-classes/dbc-class-parsed-inventory-record.lisp
parsed-inventory-record (parsed-class)


dbc-classes/dbc-class-parsed-artist-record.lisp
parsed-artist-record (parsed-naf-entity)


dbc-classes/dbc-class-parsed-publication-record.lisp
parsed-publication-record (parsed-naf-entity)



dbc-classes/dbc-class-parsed-technique-record.lisp
parsed-technique-record (parsed-naf-entity)


;;; ==============================
;;; EOF
