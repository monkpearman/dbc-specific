;;; FILE-CREATED: <Timestamp: #{2009-11-09T01:37:36-05:00Z}#{09461} - by MON>
;;; ==============================

madameï¿½

ï (239, #o357, #xef)
¿ (191, #o277, #xbf)
character: ½ (189, #o275, #xbd)
ï¿½ is a sequence of three characters - 0xEF 0xBF 0xBD, and is UTF-8
representation of the Unicode codepoint 0xFFFD. The codepoint in itself is the
replacement character for illegal UTF-8 sequences.

(URL `http://stackoverflow.com/questions/6366912/reading-file-from-windows-and-linux-yields-different-results-character-encoding/6367675#6367675')
(URL `http://en.wikipedia.org/wiki/Replacement_character#Replacement_character')

� (65533, #o177775, #xfffd)

;;; ==============================
Most of the problems have to do with the LOC Marc encodings:


(URL `http://lcweb2.loc.gov/diglib/codetables/eacc2uni.txt')
:SEE :FILE /mnt/ULAN-DRV/ULAN-notes-HG/LOC-conversion-notes/marc-char-mappings/eacc2uni.txt
(insert-char #xFF09 1)）
(princ (describe-char #xFF09) (current-buffer))

((Name FULLWIDTH RIGHT PARENTHESIS) (Category Punctuation, Close) (Combining class Pe) (Bidi category Pe) (Decomposition wide)) (Decimal digit value nil) (Digit value nil) (Numeric value nil) (Mirrored yes) (Old name FULLWIDTH CLOSING PARENTHESIS) (ISO 10646 comment nil) (Uppercase nil) (Lowercase nil) (Titlecase nil))

Dēmētrios Emmanouēl Galanēs ;; those aren't `e's
Galanis, Démétrius Emmanuel ;; those aren't `e's

Dēmētrios Emmanouēl Galanēs

Dēmētrios Emmanouēl Galanēs
;; ē -> ē (275, #o423, #x113)
;; Name: LATIN SMALL LETTER E WITH MACRON
Galanis, Démétrius Emmanuel
é => 233 (233, #o351, #xe9)
é => 101 ;; display: composed to form "é" (see below)
́ => ;COMBINING ACUTE ACCENT (769, #o1401, #x301) 
     ; (string-to-char "\301") => 193 (#o301, #xc1) 
     ; The hex value is getting confused with the octal val.
     ; (insert (format "%x" 769)) => 301

Galanis, DeÌmeÌtrius Emmanuel
GalaneÌ„s, DeÌ„meÌ„trios EmmanoueÌ„l
Galanis, DeÌmeÌtrius Emmanuel
GalaneÌs, DeÌmeÌtrios EmmanoueÌl\

ē <- bad
ē <- good ; LATIN SMALL LETTER E WITH MACRON (275, #o423, #x113) 0x0113

Galanis, DeÌmeÌtrius Emmanuel -> Galanis, Démétrius Emmanuel
GalaneÌ„s, DeÌ„meÌ„trios EmmanoueÌ„l -> Galanēs, Dēmētrios Emmanouēl
DeÌ„meÌ„trios EmmanoueÌ„l GalaneÌ„s -> Dēmētrios Emmanouēl Galanēs
GalaneÌ„s -> Galanēs

Galanis, Démétrius Emmanuel
http://lccn.loc.gov/n84019731
http://viaf.org/viaf/5203500

naturaliseÌ -> naturalisé
francÌ§ais -> français

"Ì" => "é"
"Ì" => "ē"
"Ì„"    => "ē"

(while (search-forward-regexp "Galanis, DeÌmeÌtrius Emmanuel" nil t)
  (replace-match "Galanis, Démétrius Emmanuel"))

(while (search-forward-regexp "GalaneÌ„s, DeÌ„meÌ„trios EmmanoueÌ„l" nil t)
(dolist (dcr '(("Ì" . "é")
              ("Ì" . "ē")
              ("Ì„"    . "ē")))
  (while (search-forward-regexp (car dcr) nil t)
            (replace-match (cdr dcr))))


â¦
clientsâ¦
bicyclesâ¦
langourusâ¦

The Sapling is Ready for Him 
The Sun 
 -> – EN DASH – (8211, #o20023, #x2013) 

Mckenneys => ’ RIGHT SINGLE QUOTATION MARK ’ (8217, #o20031, #x2019) 
Mckenney’s

MoÌpatsang, KiÌ dÅÌ,
MopaÌsaÌmÌ£. GaÌya da,
MoÌpaÌsaÌ, GaÌy-da-,
Da-MoÌpaÌsaÌ, GaÌy-,
MoÌppasaÌnÌnÌ, Di. Ge.,
Mopasan, Giï¸ uï¸¡i de, 
De Mopasan, Giu, 
Mopassan, Giï¸ uï¸¡i de, 
De Mopassan, Giï¸ uï¸¡i, 
MoÌ„patsang, KiÌ„ dÅ“Ì„, 
MopaÌ„saÌ„mÌ£. GaÌ„ya da, 
MoÌ„paÌ„saÌ„, GaÌ„y-da-, 
Da-MoÌ„paÌ„saÌ„, GaÌ„y-, 
MoÌ„ppasaÌ„nÌ‡nÌ‡, Di. Ge., 
Da-Mōpāsā, Gāy-, 1850-1893

"Ì"   =>  COMBINING MACRON ̄ (772, #o1404, #x304) code point: 0x0304
"Ì"   => COMBINING DOT ABOVE ̇ (775, #o1407, #x307)
"Å"   => ̅ COMBINING OVERLINE ̅ (773, #o1405, #x305)

Mōppasāṅṅ, Di. Ge., 1850-1893




"Ì"
Ì =>      204 (#o314, #xcc)
 =>  132 (#o204, #x84)
"\xcc" "\x84"
(insert "\u00cc" "\u0084")Ì


Ì
nâ€œThomas McLean.â€

ā <- bad
ā <-good
ReonaÌ„ru -> Reonāru
ā

;;; ==============================


("\\(,'.*\\)\\(___\\)\\(.*htm',\\)" ",'.*___.*htm',"  "\\1_\\3") ;or maybe `_and_'
;; ,'Journals_and_Publications_Robida_Le_Rire___image-2767.htm',

("-\\(January\\|February\\|March\\|April\\|May\\|June\\|July\\|August\\|September\\|October\\|November\\|December\\)\\(, \\([0-9]\\{1,2\\},\\)\\)" "- \\1 \\3")
;;"  Original Print -December, 19, 1896 "

("'Books and Publications Journals and Publications French Le Rire 1" 
 "'Books and Publications > Journals and Publications > French > Le Rire - "
;; 'Books and Publications Journals and Publications French Le Rire 1

("'Books and Publications Journals and Publications French Le Rire Rouge 1   "
 "'Books and Publications > Journals and Publications > French > Le Rire Rouge - ")
;; "'Books and Publications Journals and Publications French Le Rire Rouge 1   "

("  FROM LE RIRE" " from LE RIRE")
;; "  FROM LE RIRE"

("  FROM LE SOURIRE'" " from LE SOURIRE'")
;; "  FROM LE SOURIRE'"

("  FROM LE RIRE ROUGE" " FROM LE RIRE ROUGE")
;; "  FROM LE RIRE ROUGE"

(" September , 23 , 1897     Felix Juven'" 
 " September , 23 , 1897     Felix Juven'")
;; " September , 23 , 1897     Felix Juven'"

("    Felix Juven" " Felix Juven")
;; "    Felix Juven"

("   Le Rire  " " - Le Rire - ")
;; "   Le Rire  "

("<br><br>" "\\r\\n"
;; "<br><br>"
;;; ==============================

(concat
"\\("
 " \\(January\\|February\\|March\\|April\\|May\\|June\\|July\\|August\\|September\\|October\\|November\\|December\\) "
 " , "
 "\\([0-9]\\{1,2\\},\\)\\)" "- \\1 \\3")
(progn
  (search-forward-regexp " ")
  (replace-match " "))

(" September , 23 , 1897     Felix Juven'" 
 " September , 23 , 1897     Felix Juven'")
;; " September , 23 , 1897     Felix Juven'"

(progn
  (search-forward-regexp  "<br><br>" )
  (replace-match "\\\r\\\n"))

<br><br>

;;; ==============================
;;; :FILE /mnt/DBC-DRV/dcp-rcvr-configs-HG/mysql-hotcopy/mon-mysql-config-notes/sql-char-conv-regexps.el
;;; :FILE-CREATED <Timestamp: #{2009-11-13T13:41:25-05:00Z}#{09465} - by MON>
;;; ==============================
;;; acute accent 182 (ucs-insert 180) 
;;; charmap ucs-names

;;; A.7.5 Locale Definition Example
;;; The following is an example of a locale definition file that could be used as
;;; input to the localedef utility. It assumes that the utility is executed with the
;;; -f option, naming a charmap file with (at least) the following content:
;;; :SOURCE (URL `http://www.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap07.html#tag_21_07')
<SPACE>      \X20  ;;; (mon-insert-unicode #X20 t)  ;->    (hex)
<DOLLAR>     \X24  ;;; (mon-insert-unicode #X24 t)  ;-> $  (hex)
<A>          \101  ;;; (mon-insert-unicode #o101 t) ;-> A  (octal)
<A>          \141  ;;; (mon-insert-unicode #o141 t) ;-> a  (octal)
<A-ACUTE>    \225  ;;;  Ã¡ (225, #o341, #xe1) (ucs-insert #xe1) (mon-insert-unicode  #o341 t)(mon-insert-unicode 225 t) 
<A-ACUTE>    \365  ;;; (ucs-insert '#X365) (mon-insert-unicode 365) (mon-insert-unicode  #x1 t)
<A-GRAVE>    \224  ;;; (mon-insert-unicode 224 t) (mon-insert-unicode #o340 t) (mon-insert-unicode #xe0 t) 
<A-GRAVE>    \300  ;;; (mon-insert-unicode #o300 t) (mon-insert-unicode 192 t) (mon-insert-unicode #xc0 t)
<b>          \142
<C>          \103
<c>          \143
<c-cedilla>  \347  ;;; Ã§ (231, #o347, #xe7)
<d>          \x64
<H>          \110
<h>          \150
<eszet>      \xb7  ;;; (mon-insert-unicode  t)
<s>          \x73
<z>          \x7a  ;;; mon-insert-unicode #x7a t)
END CHARMAP

;;; ==============================
;;; Scénariste

keywords">Books and Publications Journals and Publications French
keywords">Books and Publications Journals and Publications French

;;; ==============================
;; loc character refs:
;;; ==============================

;;; ==============================
To convert an loc string of the form "i&#65056;"

(insert (mon-string-convert-loc "i&#65056;"))

(split-string "i&#65056;" "[&#;]" t)
("i" "65056")
(compose-chars (string-to-char "i") (string-to-number "65056"))
(compose-string (compose-chars (string-to-char "i") (string-to-number "65056"))

("i&#65056;" . "i︠") ;; (insert (compose-string (compose-chars 105 65056))) this is an i with COMBINING LIGATURE LEFT HALF e.g. ︠  (char-to-string 65056)
("u&#65057;" . "u︡") ;; (insert (compose-string (compose-chars 117 65057)))


;; these appear in author records
"&#697;" -> ʹ ; MODIFIER LETTER PRIME
"&#669;" ʻ ; MODIFIER LETTER TURNED COMMA

"&#769;" -> ́ ; COMBINING ACUTE ACCENT
"&#770;" -> ̂ ; COMBINING CIRCUMFLEX ACCENT
"&#772;" -> ̄ ; COMBINING MACRON
"&#774;" -> ̆ ; COMBINING BREVE
"&#775;" -> ̇ ; COMBINING DOT ABOVE
"&#776;" -> ̈ ; COMBINING DIAERESIS
"&#803;" -> ̣ ; COMBINING DOT BELOW
"&#807;" -> ̧ ; COMBINING CEDILLA
"&#818;" -> ̲ ; COMBINING LOW LINE
"&#65056;" -> ︠ ; COMBINING LIGATURE LEFT HALF
"&#65057;" -> ︡ ; COMBINING LIGATURE RIGHT HALF
LATIN SMALL LETTER H WITH DOT BELOW

1E25;LATIN SMALL LETTER H WITH DOT BELOW;Ll;0;L;0068 0323;;;;N;;;1E24;;1E24
;;;                                             ^char ^combine
#x0068
#x0323
#x1E25
"h&#803" => ḥ
;; character-code-properties
  decomposition: (104 803) ('h' '̣')

(char-code-property-description 
LATIN SMALL LETTER * WITH.*
(let ((latin-with))

;; (get-char-code-property 7717 'decomposition)

;; The following was used to generate the consed pairs below:
;; it is the backbone for `*mon-ampersand-sharp-diacritic-pairs*' and `mon-replace-ampersand-sharp-chars-in-buffer'
(let ((latin-withs ()))
    (dolist (un (ucs-names))
      (when (string-match-p "LATIN \\(SMALL\\|CAPITAL\\) LETTER *" (car un))
        (push (cdr un) latin-withs)))
    (let ((decomps ())
          (formatted-pairs ()))
      (dolist (lw latin-withs)
        (let ((maybe-push-decomp (get-char-code-property lw 'decomposition)))
          (when maybe-push-decomp
            (push (list maybe-push-decomp lw) decomps))))
      (dolist (dc decomps (delete-dups formatted-pairs))
                                        ; caar =>  121
                                        ; cadar => 771
                                        ; cadr => 7929
        (when (and (= (length (car dc)) 2)
                   (mon-every #'integerp (car dc)))
          (push (cons (format "%c&#%d;" (caar dc) (cadar dc))
                      (format "%c" (cadr dc)))
                formatted-pairs)))))

(princ *mon-ampersand-sharp-diacritic-pairs* (current-buffer))
(("A&#768;" . "À")
("A&#769;" . "Á")
("A&#770;" . "Â")
("A&#771;" . "Ã")
("A&#776;" . "Ä")
("A&#778;" . "Å")
("C&#807;" . "Ç")
("E&#768;" . "È")
("E&#769;" . "É")
("E&#770;" . "Ê")
("E&#776;" . "Ë")
("I&#768;" . "Ì")
("I&#769;" . "Í")
("I&#770;" . "Î")
("I&#776;" . "Ï")
("N&#771;" . "Ñ")
("O&#768;" . "Ò")
("O&#769;" . "Ó")
("O&#770;" . "Ô")
("O&#771;" . "Õ")
("O&#776;" . "Ö")
("U&#768;" . "Ù")
("U&#769;" . "Ú")
("U&#770;" . "Û")
("U&#776;" . "Ü")
("Y&#769;" . "Ý")
("a&#768;" . "à")
("a&#769;" . "á")
("a&#770;" . "â")
("a&#771;" . "ã")
("a&#776;" . "ä")
("a&#778;" . "å")
("c&#807;" . "ç")
("e&#768;" . "è")
("e&#769;" . "é")
("e&#770;" . "ê")
("e&#776;" . "ë")
("i&#768;" . "ì")
("i&#769;" . "í")
("i&#770;" . "î")
("i&#776;" . "ï")
("n&#771;" . "ñ")
("o&#768;" . "ò")
("o&#769;" . "ó")
("o&#770;" . "ô")
("o&#771;" . "õ")
("o&#776;" . "ö")
("u&#768;" . "ù")
("u&#769;" . "ú")
("u&#770;" . "û")
("u&#776;" . "ü")
("y&#769;" . "ý")
("y&#776;" . "ÿ")
("A&#772;" . "Ā")
("a&#772;" . "ā")
("A&#774;" . "Ă")
("a&#774;" . "ă")
("A&#808;" . "Ą")
("a&#808;" . "ą")
("C&#769;" . "Ć")
("c&#769;" . "ć")
("C&#770;" . "Ĉ")
("c&#770;" . "ĉ")
("C&#775;" . "Ċ")
("c&#775;" . "ċ")
("C&#780;" . "Č")
("c&#780;" . "č")
("D&#780;" . "Ď")
("d&#780;" . "ď")
("E&#772;" . "Ē")
("e&#772;" . "ē")
("E&#774;" . "Ĕ")
("e&#774;" . "ĕ")
("E&#775;" . "Ė")
("e&#775;" . "ė")
("E&#808;" . "Ę")
("e&#808;" . "ę")
("E&#780;" . "Ě")
("e&#780;" . "ě")
("G&#770;" . "Ĝ")
("g&#770;" . "ĝ")
("G&#774;" . "Ğ")
("g&#774;" . "ğ")
("G&#775;" . "Ġ")
("g&#775;" . "ġ")
("G&#807;" . "Ģ")
("g&#807;" . "ģ")
("H&#770;" . "Ĥ")
("h&#770;" . "ĥ")
("I&#771;" . "Ĩ")
("i&#771;" . "ĩ")
("I&#772;" . "Ī")
("i&#772;" . "ī")
("I&#774;" . "Ĭ")
("i&#774;" . "ĭ")
("I&#808;" . "Į")
("i&#808;" . "į")
("I&#775;" . "İ")
("J&#770;" . "Ĵ")
("j&#770;" . "ĵ")
("K&#807;" . "Ķ")
("k&#807;" . "ķ")
("L&#769;" . "Ĺ")
("l&#769;" . "ĺ")
("L&#807;" . "Ļ")
("l&#807;" . "ļ")
("L&#780;" . "Ľ")
("l&#780;" . "ľ")
("N&#769;" . "Ń")
("n&#769;" . "ń")
("N&#807;" . "Ņ")
("n&#807;" . "ņ")
("N&#780;" . "Ň")
("n&#780;" . "ň")
("O&#772;" . "Ō")
("o&#772;" . "ō")
("O&#774;" . "Ŏ")
("o&#774;" . "ŏ")
("O&#779;" . "Ő")
("o&#779;" . "ő")
("R&#769;" . "Ŕ")
("r&#769;" . "ŕ")
("R&#807;" . "Ŗ")
("r&#807;" . "ŗ")
("R&#780;" . "Ř")
("r&#780;" . "ř")
("S&#769;" . "Ś")
("s&#769;" . "ś")
("S&#770;" . "Ŝ")
("s&#770;" . "ŝ")
("S&#807;" . "Ş")
("s&#807;" . "ş")
("S&#780;" . "Š")
("s&#780;" . "š")
("T&#807;" . "Ţ")
("t&#807;" . "ţ")
("T&#780;" . "Ť")
("t&#780;" . "ť")
("U&#771;" . "Ũ")
("u&#771;" . "ũ")
("U&#772;" . "Ū")
("u&#772;" . "ū")
("U&#774;" . "Ŭ")
("u&#774;" . "ŭ")
("U&#778;" . "Ů")
("u&#778;" . "ů")
("U&#779;" . "Ű")
("u&#779;" . "ű")
("U&#808;" . "Ų")
("u&#808;" . "ų")
("W&#770;" . "Ŵ")
("w&#770;" . "ŵ")
("Y&#770;" . "Ŷ")
("y&#770;" . "ŷ")
("Y&#776;" . "Ÿ")
("Z&#769;" . "Ź")
("z&#769;" . "ź")
("Z&#775;" . "Ż")
("z&#775;" . "ż")
("Z&#780;" . "Ž")
("z&#780;" . "ž")
("O&#795;" . "Ơ")
("o&#795;" . "ơ")
("U&#795;" . "Ư")
("u&#795;" . "ư")
("A&#780;" . "Ǎ")
("a&#780;" . "ǎ")
("I&#780;" . "Ǐ")
("i&#780;" . "ǐ")
("O&#780;" . "Ǒ")
("o&#780;" . "ǒ")
("U&#780;" . "Ǔ")
("u&#780;" . "ǔ")
("Ü&#772;" . "Ǖ")
("ü&#772;" . "ǖ")
("Ü&#769;" . "Ǘ")
("ü&#769;" . "ǘ")
("Ü&#780;" . "Ǚ")
("ü&#780;" . "ǚ")
("Ü&#768;" . "Ǜ")
("ü&#768;" . "ǜ")
("Ä&#772;" . "Ǟ")
("ä&#772;" . "ǟ")
("Ȧ&#772;" . "Ǡ")
("ȧ&#772;" . "ǡ")
("Æ&#772;" . "Ǣ")
("æ&#772;" . "ǣ")
("G&#780;" . "Ǧ")
("g&#780;" . "ǧ")
("K&#780;" . "Ǩ")
("k&#780;" . "ǩ")
("O&#808;" . "Ǫ")
("o&#808;" . "ǫ")
("Ǫ&#772;" . "Ǭ")
("ǫ&#772;" . "ǭ")
("Ʒ&#780;" . "Ǯ")
("ʒ&#780;" . "ǯ")
("j&#780;" . "ǰ")
("G&#769;" . "Ǵ")
("g&#769;" . "ǵ")
("N&#768;" . "Ǹ")
("n&#768;" . "ǹ")
("Å&#769;" . "Ǻ")
("å&#769;" . "ǻ")
("Æ&#769;" . "Ǽ")
("æ&#769;" . "ǽ")
("Ø&#769;" . "Ǿ")
("ø&#769;" . "ǿ")
("A&#783;" . "Ȁ")
("a&#783;" . "ȁ")
("A&#785;" . "Ȃ")
("a&#785;" . "ȃ")
("E&#783;" . "Ȅ")
("e&#783;" . "ȅ")
("E&#785;" . "Ȇ")
("e&#785;" . "ȇ")
("I&#783;" . "Ȉ")
("i&#783;" . "ȉ")
("I&#785;" . "Ȋ")
("i&#785;" . "ȋ")
("O&#783;" . "Ȍ")
("o&#783;" . "ȍ")
("O&#785;" . "Ȏ")
("o&#785;" . "ȏ")
("R&#783;" . "Ȑ")
("r&#783;" . "ȑ")
("R&#785;" . "Ȓ")
("r&#785;" . "ȓ")
("U&#783;" . "Ȕ")
("u&#783;" . "ȕ")
("U&#785;" . "Ȗ")
("u&#785;" . "ȗ")
("S&#806;" . "Ș")
("s&#806;" . "ș")
("T&#806;" . "Ț")
("t&#806;" . "ț")
("H&#780;" . "Ȟ")
("h&#780;" . "ȟ")
("A&#775;" . "Ȧ")
("a&#775;" . "ȧ")
("E&#807;" . "Ȩ")
("e&#807;" . "ȩ")
("Ö&#772;" . "Ȫ")
("ö&#772;" . "ȫ")
("Õ&#772;" . "Ȭ")
("õ&#772;" . "ȭ")
("O&#775;" . "Ȯ")
("o&#775;" . "ȯ")
("Ȯ&#772;" . "Ȱ")
("ȯ&#772;" . "ȱ")
("Y&#772;" . "Ȳ")
("y&#772;" . "ȳ")
("A&#805;" . "Ḁ")
("a&#805;" . "ḁ")
("B&#775;" . "Ḃ")
("b&#775;" . "ḃ")
("B&#803;" . "Ḅ")
("b&#803;" . "ḅ")
("B&#817;" . "Ḇ")
("b&#817;" . "ḇ")
("Ç&#769;" . "Ḉ")
("ç&#769;" . "ḉ")
("D&#775;" . "Ḋ")
("d&#775;" . "ḋ")
("D&#803;" . "Ḍ")
("d&#803;" . "ḍ")
("D&#817;" . "Ḏ")
("d&#817;" . "ḏ")
("D&#807;" . "Ḑ")
("d&#807;" . "ḑ")
("D&#813;" . "Ḓ")
("d&#813;" . "ḓ")
("Ē&#768;" . "Ḕ")
("ē&#768;" . "ḕ")
("Ē&#769;" . "Ḗ")
("ē&#769;" . "ḗ")
("E&#813;" . "Ḙ")
("e&#813;" . "ḙ")
("E&#816;" . "Ḛ")
("e&#816;" . "ḛ")
("Ȩ&#774;" . "Ḝ")
("ȩ&#774;" . "ḝ")
("F&#775;" . "Ḟ")
("f&#775;" . "ḟ")
("G&#772;" . "Ḡ")
("g&#772;" . "ḡ")
("H&#775;" . "Ḣ")
("h&#775;" . "ḣ")
("H&#803;" . "Ḥ")
("h&#803;" . "ḥ")
("H&#776;" . "Ḧ")
("h&#776;" . "ḧ")
("H&#807;" . "Ḩ")
("h&#807;" . "ḩ")
("H&#814;" . "Ḫ")
("h&#814;" . "ḫ")
("I&#816;" . "Ḭ")
("i&#816;" . "ḭ")
("Ï&#769;" . "Ḯ")
("ï&#769;" . "ḯ")
("K&#769;" . "Ḱ")
("k&#769;" . "ḱ")
("K&#803;" . "Ḳ")
("k&#803;" . "ḳ")
("K&#817;" . "Ḵ")
("k&#817;" . "ḵ")
("L&#803;" . "Ḷ")
("l&#803;" . "ḷ")
("Ḷ&#772;" . "Ḹ")
("ḷ&#772;" . "ḹ")
("L&#817;" . "Ḻ")
("l&#817;" . "ḻ")
("L&#813;" . "Ḽ")
("l&#813;" . "ḽ")
("M&#769;" . "Ḿ")
("m&#769;" . "ḿ")
("M&#775;" . "Ṁ")
("m&#775;" . "ṁ")
("M&#803;" . "Ṃ")
("m&#803;" . "ṃ")
("N&#775;" . "Ṅ")
("n&#775;" . "ṅ")
("N&#803;" . "Ṇ")
("n&#803;" . "ṇ")
("N&#817;" . "Ṉ")
("n&#817;" . "ṉ")
("N&#813;" . "Ṋ")
("n&#813;" . "ṋ")
("Õ&#769;" . "Ṍ")
("õ&#769;" . "ṍ")
("Õ&#776;" . "Ṏ")
("õ&#776;" . "ṏ")
("Ō&#768;" . "Ṑ")
("ō&#768;" . "ṑ")
("Ō&#769;" . "Ṓ")
("ō&#769;" . "ṓ")
("P&#769;" . "Ṕ")
("p&#769;" . "ṕ")
("P&#775;" . "Ṗ")
("p&#775;" . "ṗ")
("R&#775;" . "Ṙ")
("r&#775;" . "ṙ")
("R&#803;" . "Ṛ")
("r&#803;" . "ṛ")
("Ṛ&#772;" . "Ṝ")
("ṛ&#772;" . "ṝ")
("R&#817;" . "Ṟ")
("r&#817;" . "ṟ")
("S&#775;" . "Ṡ")
("s&#775;" . "ṡ")
("S&#803;" . "Ṣ")
("s&#803;" . "ṣ")
("Ś&#775;" . "Ṥ")
("ś&#775;" . "ṥ")
("Š&#775;" . "Ṧ")
("š&#775;" . "ṧ")
("Ṣ&#775;" . "Ṩ")
("ṣ&#775;" . "ṩ")
("T&#775;" . "Ṫ")
("t&#775;" . "ṫ")
("T&#803;" . "Ṭ")
("t&#803;" . "ṭ")
("T&#817;" . "Ṯ")
("t&#817;" . "ṯ")
("T&#813;" . "Ṱ")
("t&#813;" . "ṱ")
("U&#804;" . "Ṳ")
("u&#804;" . "ṳ")
("U&#816;" . "Ṵ")
("u&#816;" . "ṵ")
("U&#813;" . "Ṷ")
("u&#813;" . "ṷ")
("Ũ&#769;" . "Ṹ")
("ũ&#769;" . "ṹ")
("Ū&#776;" . "Ṻ")
("ū&#776;" . "ṻ")
("V&#771;" . "Ṽ")
("v&#771;" . "ṽ")
("V&#803;" . "Ṿ")
("v&#803;" . "ṿ")
("W&#768;" . "Ẁ")
("w&#768;" . "ẁ")
("W&#769;" . "Ẃ")
("w&#769;" . "ẃ")
("W&#776;" . "Ẅ")
("w&#776;" . "ẅ")
("W&#775;" . "Ẇ")
("w&#775;" . "ẇ")
("W&#803;" . "Ẉ")
("w&#803;" . "ẉ")
("X&#775;" . "Ẋ")
("x&#775;" . "ẋ")
("X&#776;" . "Ẍ")
("x&#776;" . "ẍ")
("Y&#775;" . "Ẏ")
("y&#775;" . "ẏ")
("Z&#770;" . "Ẑ")
("z&#770;" . "ẑ")
("Z&#803;" . "Ẓ")
("z&#803;" . "ẓ")
("Z&#817;" . "Ẕ")
("z&#817;" . "ẕ")
("h&#817;" . "ẖ")
("t&#776;" . "ẗ")
("w&#778;" . "ẘ")
("y&#778;" . "ẙ")
("ſ&#775;" . "ẛ")
("A&#803;" . "Ạ")
("a&#803;" . "ạ")
("A&#777;" . "Ả")
("a&#777;" . "ả")
("Â&#769;" . "Ấ")
("â&#769;" . "ấ")
("Â&#768;" . "Ầ")
("â&#768;" . "ầ")
("Â&#777;" . "Ẩ")
("â&#777;" . "ẩ")
("Â&#771;" . "Ẫ")
("â&#771;" . "ẫ")
("Ạ&#770;" . "Ậ")
("ạ&#770;" . "ậ")
("Ă&#769;" . "Ắ")
("ă&#769;" . "ắ")
("Ă&#768;" . "Ằ")
("ă&#768;" . "ằ")
("Ă&#777;" . "Ẳ")
("ă&#777;" . "ẳ")
("Ă&#771;" . "Ẵ")
("ă&#771;" . "ẵ")
("Ạ&#774;" . "Ặ")
("ạ&#774;" . "ặ")
("E&#803;" . "Ẹ")
("e&#803;" . "ẹ")
("E&#777;" . "Ẻ")
("e&#777;" . "ẻ")
("E&#771;" . "Ẽ")
("e&#771;" . "ẽ")
("Ê&#769;" . "Ế")
("ê&#769;" . "ế")
("Ê&#768;" . "Ề")
("ê&#768;" . "ề")
("Ê&#777;" . "Ể")
("ê&#777;" . "ể")
("Ê&#771;" . "Ễ")
("ê&#771;" . "ễ")
("Ẹ&#770;" . "Ệ")
("ẹ&#770;" . "ệ")
("I&#777;" . "Ỉ")
("i&#777;" . "ỉ")
("I&#803;" . "Ị")
("i&#803;" . "ị")
("O&#803;" . "Ọ")
("o&#803;" . "ọ")
("O&#777;" . "Ỏ")
("o&#777;" . "ỏ")
("Ô&#769;" . "Ố")
("ô&#769;" . "ố")
("Ô&#768;" . "Ồ")
("ô&#768;" . "ồ")
("Ô&#777;" . "Ổ")
("ô&#777;" . "ổ")
("Ô&#771;" . "Ỗ")
("ô&#771;" . "ỗ")
("Ọ&#770;" . "Ộ")
("ọ&#770;" . "ộ")
("Ơ&#769;" . "Ớ")
("ơ&#769;" . "ớ")
("Ơ&#768;" . "Ờ")
("ơ&#768;" . "ờ")
("Ơ&#777;" . "Ở")
("ơ&#777;" . "ở")
("Ơ&#771;" . "Ỡ")
("ơ&#771;" . "ỡ")
("Ơ&#803;" . "Ợ")
("ơ&#803;" . "ợ")
("U&#803;" . "Ụ")
("u&#803;" . "ụ")
("U&#777;" . "Ủ")
("u&#777;" . "ủ")
("Ư&#769;" . "Ứ")
("ư&#769;" . "ứ")
("Ư&#768;" . "Ừ")
("ư&#768;" . "ừ")
("Ư&#777;" . "Ử")
("ư&#777;" . "ử")
("Ư&#771;" . "Ữ")
("ư&#771;" . "ữ")
("Ư&#803;" . "Ự")
("ư&#803;" . "ự")
("Y&#768;" . "Ỳ")
("y&#768;" . "ỳ")
("Y&#803;" . "Ỵ")
("y&#803;" . "ỵ")
("Y&#777;" . "Ỷ")
("y&#777;" . "ỷ")
("Y&#771;" . "Ỹ")
("y&#771;" . "ỹ"))


ß
þ
Þ
ð
Ð
"&#230;" æ
"&#339;" œ

p&#699 
ē

ʻ
(let ((latin-withs ()))
   (dolist (un (ucs-names))
     (when (string-match-p "LATIN \\(SMALL\\|CAPITAL\\) LETTER . WITH .*" (car un))
       (push (cdr un) latin-withs)))
   (let ((decomps ())
         (formatted-pairs ()))
     (dolist (lw latin-withs)
       (let ((maybe-push-decomp (get-char-code-property lw 'decomposition)))
         (when maybe-push-decomp
           (push (list maybe-push-decomp lw)decomps))))
     (dolist (dc decomps (princ formatted-pairs))
                                        ; caar =>  121
                                        ; cadar => 771
                                        ; cadr => 7929
       (when (= (length (car dc)) 2)
       (notany
         (push (format "(\"%c&#%d;\" . \"%c\")" (caar dc) (cadar dc) (cadr dc))
               formatted-pairs)))))

(dolist (i 
(let ((case-fold-search nil))
     (while (search-forward-regexp "c&#807;" nil t) (replace-match "ç" t)))
;; easy targets:
;; ç Ç
(("c&#807;" . "ç")
("C&#807;" . "Ç")
;; á Á é É í Í ó Ó ú Ú ý Ý ź Ź
("a&#769;" . "á")
("A&#769;" . "Á")
("e&#769;" . "é")
("E&#769;" . "É")
("i&#769;" . "í")
("I&#769;" . "Í")
("o&#769;" . "ó")
("O&#769;" . "Ó")
("u&#769;" . "ú")
("U&#769;" . "Ú")
("y&#769;" . "ý")
("Y&#669;" . "Ý")
("z&#669;" . "ź")
("Z&#769;" . "Ź")

("a&#769;" . "á")
("A&#769;" . "Á")
("e&#769;" . "é")
("E&#769;" . "É")
("i&#769;" . "í")
("I&#769;" . "Í")
("o&#769;" . "ó")
("O&#769;" . "Ó")
("u&#769;" . "ú")
("U&#769;" . "Ú")
("y&#769;" . "ý")
("Y&#669;" . "Ý")
("z&#669;" . "ź")
("Z&#769;" . "Ź")

;; à À è È ì Ì ò Ò ù Ù
("a&#768;" . "à")
("A&#768;" . "À")
("e&#768;" . "è")
("E&#768;" . "È")
("i&#768;" . "ì")
("I&#768;" . "Ì")
("o&#768;" . "ò")
("O&#768;" . "Ò")
("u&#768;" . "ù")
("U&#768;" . "Ù")




;; ä Ä ë Ë ï Ï ö Ö ü Ü ÿ 
("a&#776;" . "ä")
("A&#776;" . "Ä")
("e&#776;" . "ë")
("E&#776;" . "Ë")
("i&#776;" . "ï")
("I&#776;" . "Ï")
("o&#776;" . "ö")
("O&#776;" . "Ö")
("u&#776;" . "ü")
("U&#776;" . "Ü")
("y&#776;" . "ÿ" 
;; å Å ů Ů
("a&#367;" . "å")
("A&#367;" . "Å")
("u&#367;" . "ů")
("U&#367;" . "Ů")
;; â Â ê Ê î Î ô Ô û Û
("a&#770;" . "â")
("A&#770;" . "Â")
("e&#770;" . "ê")
("E&#770;" . "Ê")
("i&#770;" . "î")
("I&#770;" . "Î")
("o&#770;" . "ô")
("O&#770;" . "Ô")
("u&#770;" . "û")
("U&#770;" . "Û")
;; ă Ă ĕ Ĕ ĭ Ĭ ŏ Ŏ ŭ Ŭ č Č ň Ň ř Ř š Š ž Ž
("a&#774;" . "ă")
("A&#774;" . "Ă")
("e&#774;" . "ĕ")
("E&#774;" . "Ĕ")
("i&#774;" . "ĭ")
("I&#774;" . "Ĭ")
("o&#774;" . "ŏ")
("O&#774;" . "Ŏ")
("u&#774;" . "ŭ")
("U&#774;" . "Ŭ")
("c&#774;" . "č")
("C&#774;" . "Č")
("n&#774;" . "ň")
("N&#774;" . "Ň")
("r&#774;" . "ř")
("R&#774;" . "Ř")
("s&#774;" . "š")
("S&#774;" . "Š")
("z&#774;" . "ž")
("Z&#774;" . "Ž")
;; ã Ã õ Õ ñ Ñ
("a#&771;" . "ã")
("A#&771;" . "Ã")
("o#&771;" . "õ")
("O#&771;" . "Õ")
("n#&771;" . "ñ")
("N#&771;" . "Ñ"))



(ucs-insert "LATIN CAPITAL LETTER S ACUTE")
(let ((unames (ucs-names)))
     (dolist (i ("LATIN CAPITAL LETTER S CEDILLA" "
"LATIN CAPITAL LETTER S CIRCUMFLEX"
"LATIN CAPITAL LETTER S HACEK"
"LATIN CAPITAL LETTER S WITH ACUTE"
"LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE"
"LATIN CAPITAL LETTER S WITH CARON"
"LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE"
"LATIN CAPITAL LETTER S WITH CEDILLA"
"LATIN CAPITAL LETTER S WITH CIRCUMFLEX"
"LATIN CAPITAL LETTER S WITH COMMA BELOW"
"LATIN CAPITAL LETTER S WITH DOT ABOVE"
"LATIN CAPITAL LETTER S WITH DOT BELOW"
"LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE"
"LATIN CAPITAL LETTER S WITH SWASH TAIL")
                 (assoc-string name unames)

(assoc-string  
"LATIN CAPITAL LETTER S WITH DOT BELOW"
       ;;"LATIN SMALL LETTER S WITH DOT BELOW"
       (ucs-names))


;; following are convert to the form &#<NUM>; after parsing the xml
,----
| &amp;#769;
| &amp;#807;
| &amp;#776;
| &amp;#697;
| 
| &#769; ;; COMBINING ACUTE ACCENT ́ (769, #o1401, #x301)
| &#697; ;; MODIFIER LETTER PRIME ʹ (697, #o1271, #x2b9)
| &#776; ;; COMBINING DIAERESIS ̈ (776, #o1410, #x308)
| &#807; ;; COMBINING PALATALIZED HOOK BELOW (801, #o1441, #x321)
| 
| 
| (progn (newline)
|        (insert-char 769 2))
`----

:NOTE These must be fixed
&amp;#769 é
&amp;#807

u&amp;#776

&amp;
&quot;


("&lt;" . ">")


&amp;#772
&amp;#775
&amp;#333
&amp;#363





<field name="used_for">Hiroshige I | Utagawa, Hiroshige | Ichiryu&amp;#772;sai Hiroshige | Ryu&amp;#772;sai | Ichiyu&amp;#772;sai Hiroshige | Ichiyo Hiroshige | Khirosige&amp;#775; | Ando&amp;#772;, Tokitaro&amp;#772; | Ando&amp;#772;, Tokutaro&amp;#772; | Ando&amp;#772;, Ju&amp;#772;emon | Yu&amp;#772;sai | Ando&amp;#772;, | Tokubei | Utakawa, Hiroshig | Utagawa, Hiroshige | And&amp;#333; Hiroshige | And&amp;#333;, Hiroshige | Hiroshige, And&amp;#333; | Utugawa Hiroshige | Ando | Hiroshige | Ichiy&amp;#363;sai | Ichiry&amp;#363;sai | Tokutar&amp;#333; | Tokubei</field>


("c&#807;" . "ç")
("e&#769"  . "é")
("E&#769"  . "É")
("a&#768;"  . "à") ;; (char-to-string 768)

(let ((case-fold-search nil))
  (while (search-forward-regexp "E&#769;" nil t)
    (replace-match "É")))

(let ((case-fold-search nil))
  (while (search-forward-regexp "E&#769;" nil t)
    (replace-match "é")))


;;; ==============================

("Hermï¿½s" . "Hermés")

;; Benezit 

("B?zit" . "Bénézit")
("BÃ©nÃ©zit" . "Bénézit")
("Be&amp;#769;ne&amp;#769;zit" . "Bénézit")
("Be&#769;ne&#769;zit" . "Bénézit")

;; Élève de


K?ler-Lexikon
Allgemeines K?lerlexikon
Ren?

HÃƒÂƒÃ‚ÂƒÃƒÂ‚Ã‚Â©mard
Mus?
Soci? des
au march?

Léonnec
Int?ssante

PyrÃ©nÃ©es

;;; ==============================
;; BNF fields
;;; ==============================
("Notice nÂ°" . "Notice n°")
("Notice nï¿½" . "Notice n°")
("Cr?ion" . "Création")
("Crï¿½ation" . "Création")
("Nationalitï¿½(s)" . "Nationalité(s)")
("Responsabilitï¿½(s) exercï¿½e(s)" . "Responsabilité(s) exercée(s)")
("Responsabilitï¿½(s)" . "Responsabilité(s)")
("exercï¿½e(s)"  . "exercée(s)")
("franï¿½ais" . "français")

("Forme(s) associï¿½e(s)" . "Forme(s) associée(s)")
("Mise ?our" . "Mise à jour")

;; ("texte imprimÃ©" . )
;; ("Forme(s) rejetée(s)" .)

;;; ==============================



("Figaro Illustr?" ."Figaro illustré")
("Illustr?" . "Illustré")
("illustr?" . "illustré")

la Ba?nette

édité à

D?te ?La Caricature

Caf?



;; ;;; ==============================
;; If we should ever use the SQL csv dumps what to do about \r\n? e.g.
;;  "\r\n"
;; and:
;; "
;; "

;; - convert to #\Newline#\Return ?
;; - convert to "~%"?
;; (code-char 13) => #\Return
;; (code-char 10) => #\Newline

;;; ==============================
;; dump-refs-xml has the field year_year
;; (search-forward-regexp "\"year_year\">\[0-9]\\{4,4\\}" nil t)

;;; ==============================
;;; EOF
